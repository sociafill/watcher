image: golang:1.10

stages:
- tools
- clone
# - vendor
- test
- build
- docker

tools:
  stage: tools
  variables:
    GIT_STRATEGY: none
  script:
  - go get -u github.com/golang/dep/cmd/dep
  - apt-get update && apt install tree -y
  - cd $GOPATH && pwd && tree
  - ls -la /go/bin
  - ls -la /go/bin/dep
  artifacts:
    paths:
    - /go/bin/dep

clone:
  stage: clone
  script:
  - mkdir -p $GOPATH/src
  - cp -a $CI_PROJECT_DIR/ $GOPATH/src/$CI_PROJECT_NAME/
  artifacts:
    paths:
    - /go/src/$CI_PROJECT_NAME
  

test:
  stage: test
  script:
  - pwd
  - ls -la
  - go get -u github.com/golang/dep/cmd/dep
  - mkdir -p $GOPATH/src
  - cd $GOPATH/src
  - ln -s $CI_PROJECT_DIR
  - cd $CI_PROJECT_NAME
  - dep ensure
  - go test

build:
  stage: build
  script:
  - go get -u github.com/golang/dep/cmd/dep
  - mkdir -p $GOPATH/src
  - cd $GOPATH/src
  - ln -s $CI_PROJECT_DIR
  - cd $CI_PROJECT_NAME
  - dep ensure
  - pwd
  - CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o watcher .
  - pwd
  - ls -la
  artifacts:
    paths:
      - watcher

docker:image:
  stage: docker
  image: docker:latest
  dependencies: 
  - build
  services:
  - docker:dind
  script:
  - docker version
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  - docker build . -t $CI_REGISTRY_IMAGE:${CI_COMMIT_SHA:0:8}
  - docker tag $CI_REGISTRY_IMAGE:${CI_COMMIT_SHA:0:8} $CI_REGISTRY_IMAGE:latest
  - docker tag $CI_REGISTRY_IMAGE:${CI_COMMIT_SHA:0:8} $CI_REGISTRY_IMAGE:${CI_COMMIT_SHA:0:8}
  - docker images
  - docker push $CI_REGISTRY_IMAGE:latest
  - docker push $CI_REGISTRY_IMAGE:${CI_COMMIT_SHA:0:8}